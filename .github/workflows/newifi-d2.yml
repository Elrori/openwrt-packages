name: ramips

on:
  workflow_dispatch:
  schedule:
    - cron: 00 16 * * *

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        shell: bash {0}
        run: |
          echo "TARGET=ramips" >> $GITHUB_ENV
          echo "CONFIG=Newifi-D2.config" >> $GITHUB_ENV
      - name: Get latest release version
        shell: bash {0}
        run: |
          echo "RELEASE_VERSION=$(curl -s -L https://api.github.com/repos/redchenjs/openwrt-packages/tags | grep '".*-${{ env.TARGET }}"' | head -n 1 | sed -r 's|.*"(.*)".*|\1|g')" >> $GITHUB_ENV
      - name: Checkout OpenWrt repository
        uses: actions/checkout@v2
        with:
          repository: 'openwrt/openwrt'
      - name: Get latest Kernel version
        shell: bash {0}
        run: |
          KERNEL_VERSION=$(cat target/linux/${{ env.TARGET }}/Makefile | grep KERNEL_PATCHVER | sed -r 's|.*([0-9]+.[0-9]+)$|\1|')
          LINUX_VERSION=$(cat include/kernel-version.mk | grep LINUX_VERSION-$KERNEL_VERSION | sed -r 's|.*\.([0-9]+)$|\1|')
          echo "KERNEL_VERSION=$KERNEL_VERSION.$LINUX_VERSION" >> $GITHUB_ENV
      - name: Compare release versions
        shell: bash {0}
        run: |
          if [[ "v${{ env.KERNEL_VERSION }}-${{ env.TARGET }}" == "${{ env.RELEASE_VERSION }}" ]]; then
            echo "LATEST_VERSION=1" >> $GITHUB_ENV
          else
            echo "LATEST_VERSION=0" >> $GITHUB_ENV
          fi
      - name: Compile OpenWrt packages
        if: env.LATEST_VERSION == 0
        shell: bash {0}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          git clone --recursive https://github.com/redchenjs/openwrt-packages package/3rd
          cp package/3rd/${{ env.CONFIG }} .config
          make defconfig
          make -j9 V=s
      - name: Prepare artifacts
        if: env.LATEST_VERSION == 0
        shell: bash {0}
        run: |
          mkdir artifacts
          cp bin/targets/${{ env.TARGET }}/*/*.bin artifacts/
      - name: Create release
        if: env.LATEST_VERSION == 0
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.KERNEL_VERSION }}-${{ env.TARGET }}
          release_name: Release v${{ env.KERNEL_VERSION }}-${{ env.TARGET }}
          draft: false
          prerelease: false
      - name: Upload release assets
        if: env.LATEST_VERSION == 0
        uses: NBTX/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          targets: artifacts/*
